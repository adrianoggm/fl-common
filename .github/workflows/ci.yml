name: fl-common CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'fl-common/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'fl-common/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./fl-common
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: fl-common/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Generate protobuf files
      run: |
        poetry run python -m grpc_tools.protoc \
          --proto_path=proto \
          --python_out=src \
          --grpc_python_out=src \
          proto/*.proto
    
    - name: Code formatting check (Black)
      run: poetry run black --check --diff src/ tests/
    
    - name: Import sorting check (isort)
      run: poetry run isort --check-only --diff src/ tests/
    
    - name: Linting (flake8)
      run: poetry run flake8 src/ tests/
    
    - name: Type checking (mypy)
      run: poetry run mypy src/
    
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: ./fl-common
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Generate protobuf files
      run: |
        poetry run python -m grpc_tools.protoc \
          --proto_path=proto \
          --python_out=src \
          --grpc_python_out=src \
          proto/*.proto
    
    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=test-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./fl-common/coverage.xml
        flags: fl-common
        name: fl-common-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: fl-common/test-results.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./fl-common
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run security scan (bandit)
      run: poetry run bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run dependency scan (safety)
      run: poetry run safety check --json --output safety-report.json
      continue-on-error: true

  build-and-publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./fl-common
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Build package
      run: poetry build
    
    - name: Check package
      run: poetry run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: fl-common-dist
        path: fl-common/dist/
    
    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   env:
    #     POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
    #   run: poetry publish
